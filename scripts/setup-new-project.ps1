# Setup New Project with RooFlow Custom Modes
# This script automates the process of setting up RooFlow custom modes, memory system, and ADF integration in the current directory
# Usage: .\setup-new-project.ps1 [-ProjectName "YourProjectName"]
# Note: This script assumes it's being run from the root directory of the project you want to set up
# If ProjectName is not provided, the current directory name will be used

param(
    [Parameter(Mandatory=$false)]
    [string]$ProjectName = ""
)

# If ProjectName is not provided, use the current directory name
if ([string]::IsNullOrEmpty($ProjectName)) {
    $ProjectName = Split-Path -Path (Get-Location).Path -Leaf
    Write-Host "Using current directory name as project name: $ProjectName" -ForegroundColor Yellow
}

# Use the current directory as the project path
$fullProjectPath = Get-Location

# Check if the current directory is empty or contains only a few standard files
$allowedFiles = @('.git', '.gitignore', 'README.md', 'LICENSE')
$currentFiles = Get-ChildItem -Force | Where-Object { $_.Name -notin $allowedFiles }

if ($currentFiles.Count -gt 0) {
    Write-Host "Warning: The current directory is not empty. It's recommended to run this script in an empty directory or a newly initialized repository." -ForegroundColor Yellow
    $confirmation = Read-Host "Do you want to continue anyway? (y/n)"
    if ($confirmation -ne 'y') {
        Write-Host "Setup cancelled by user." -ForegroundColor Red
        exit 1
    }
}

Write-Host "Setting up RooFlow for project: $ProjectName in the current directory" -ForegroundColor Green

try {
    # Step 1: Initialize Git repository
    Write-Host "Initializing Git repository..." -ForegroundColor Yellow
    git init | Out-Null
    Write-Host "Git repository initialized" -ForegroundColor Green

    # Step 2: Create .roomodes file
    Write-Host "Creating .roomodes file..." -ForegroundColor Yellow
    $roomodesContent = @'
{
  "customModes": [
    {
      "slug": "test",
      "name": "Test",
      "roleDefinition": "You are Roo's Test mode for this specific project",
      "groups": [
        "read",
        "browser",
        "command",
        "edit",
        "mcp"
      ],
      "source": "project",
      "customInstructions": "Always check to make sure memory bank is active. Explicitly prompt Emily when she needs to do a manual action. terminal commands must be PowerShell. Explicitly prompt Emily when she needs to do a manual action. Save to memory and prompt user to start a new task when token cost nears $0.5"
    }
  ]
}
'@
    Set-Content -Path ".roomodes" -Value $roomodesContent
    Write-Host "Created .roomodes file" -ForegroundColor Green

    # Step 3: Create .rooignore file
    Write-Host "Creating .rooignore file..." -ForegroundColor Yellow
    $rooignoreContent = @'
node_modules/
dist/
build/
.git/
*.log
'@
    Set-Content -Path ".rooignore" -Value $rooignoreContent
    Write-Host "Created .rooignore file" -ForegroundColor Green

    # Step 4: Create .gitignore file
    Write-Host "Creating .gitignore file..." -ForegroundColor Yellow
    $gitignoreContent = @'
# Dependency directories
node_modules/
jspm_packages/

# Build outputs
dist/
build/
out/
*.min.*

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# IDEs and editors
.idea/
.vscode/
*.swp
*.swo
*~
.DS_Store
'@
    Set-Content -Path ".gitignore" -Value $gitignoreContent
    Write-Host "Created .gitignore file" -ForegroundColor Green

    # Step 5: Create memory-bank directory and related directories
    Write-Host "Creating memory-bank directory..." -ForegroundColor Yellow
    New-Item -Path "memory-bank" -ItemType Directory | Out-Null
    Write-Host "Created memory-bank directory" -ForegroundColor Green
    
    # Create memory-bank/archives directory
    Write-Host "Creating memory-bank archives subdirectory..." -ForegroundColor Yellow
    $archivesSubPath = "memory-bank/archives"
    New-Item -Path $archivesSubPath -ItemType Directory | Out-Null
    Write-Host "Created memory-bank archives subdirectory" -ForegroundColor Green
    
    # Create memory-archives directory
    Write-Host "Creating memory-archives directory..." -ForegroundColor Yellow
    New-Item -Path "memory-archives" -ItemType Directory | Out-Null
    Write-Host "Created memory-archives directory" -ForegroundColor Green
    
    # Create .roo directory
    Write-Host "Creating .roo directory..." -ForegroundColor Yellow
    New-Item -Path ".roo" -ItemType Directory | Out-Null
    Write-Host "Created .roo directory" -ForegroundColor Green

    # Get current timestamp
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

    # Step 6: Create memory bank files
    $memoryBankFiles = @{
        "productContext.md" = @"
# Product Context

## Project Overview
[Brief description of $ProjectName]

## Goals
- [Primary goal]
- [Secondary goal]

## Features
- [Core feature 1]
- [Core feature 2]

## Architecture
[Initial architecture decisions]
"@
        "activeContext.md" = @"
# Active Context

## Current Focus
Initial project setup and planning

## Recent Changes
Project initialization on $timestamp

## Open Questions/Issues
- [Initial question/issue 1]
- [Initial question/issue 2]
"@
        "systemPatterns.md" = @"
# System Patterns

## Design Patterns
[Initial design patterns]

## Architectural Patterns
[Initial architectural patterns]

## Coding Standards
[Project-specific coding standards]
"@
        "decisionLog.md" = @"
# Decision Log

[$timestamp] - Project initialized with RooFlow memory bank
"@
        "progress.md" = @"
# Progress

[$timestamp] - Project setup with RooFlow memory bank
"@
    }

    foreach ($file in $memoryBankFiles.Keys) {
        Write-Host "Creating memory-bank/$file..." -ForegroundColor Yellow
        Set-Content -Path "memory-bank/$file" -Value $memoryBankFiles[$file]
        Write-Host "Created memory-bank/$file" -ForegroundColor Green
    }
    
    # Create memory-config.json with default content
    Write-Host "Creating memory-config.json..." -ForegroundColor Yellow
    $configFilePath = "memory-bank/memory-config.json"
    $defaultConfig = @{
        activeProjects = @()
        completedProjects = @()
        archiveSettings = @{
            autoArchiveCompleted = $true
            keepCompletedDays = 14
            archiveOnUMB = $true
        }
        loadSettings = @{
            prioritizeActive = $true
            maxEntriesPerFile = 50
            loadCompletedProjects = $false
        }
        projectMetadata = @{}
    } | ConvertTo-Json -Depth 5
    Set-Content -Path $configFilePath -Value $defaultConfig
    Write-Host "Created memory-config.json" -ForegroundColor Green
    
    # Create empty archive files
    $archiveFiles = @(
        "activeContext-archive.md",
        "decisionLog-archive.md",
        "productContext-archive.md",
        "progress-archive.md",
        "systemPatterns-archive.md"
    )
    
    foreach ($file in $archiveFiles) {
        $filePath = Join-Path -Path $archivesSubPath -ChildPath $file
        Write-Host "Creating empty archive file: $filePath" -ForegroundColor Yellow
        New-Item -Path $filePath -ItemType File | Out-Null
        Write-Host "Created empty archive file: $filePath" -ForegroundColor Green
    }
    
    # Create empty archive-index.md
    $archiveIndexFilePath = Join-Path -Path $archivesSubPath -ChildPath "archive-index.md"
    Write-Host "Creating empty archive index: $archiveIndexFilePath" -ForegroundColor Yellow
    New-Item -Path $archiveIndexFilePath -ItemType File | Out-Null
    Write-Host "Created empty archive index" -ForegroundColor Green
    
    # Create mcp-config.json with default server configurations
    Write-Host "Creating default mcp-config.json..." -ForegroundColor Yellow
    $mcpConfigPath = ".roo/mcp-config.json"
    $defaultMcpConfig = @{
        mcpServers = @{
            filesystem = @{
                enabled = $false
                description = "Provides access to the local filesystem."
                basePath = "<Specify base path if needed, e.g., project root or specific data folder>"
            }
            git = @{
                enabled = $false
                description = "Provides Git repository operations."
                repoPath = "<Specify path to the Git repository, defaults to project root if empty>"
                credentialsEnvVar = "<Optional: Environment variable name for Git credentials>"
            }
            braveSearch = @{
                enabled = $false
                description = "Provides web search capabilities via Brave Search API."
                apiKeyEnvVar = "BRAVE_SEARCH_API_KEY" # Placeholder - User must set this environment variable
            }
        }
    } | ConvertTo-Json -Depth 5
    Set-Content -Path $mcpConfigPath -Value $defaultMcpConfig -Encoding UTF8
    Write-Host "Created default mcp-config.json" -ForegroundColor Green

    # Step 7: Create a basic README.md
    Write-Host "Creating README.md..." -ForegroundColor Yellow
    $readmeContent = @"
# $ProjectName

## Overview
[Brief description of the project]

## Getting Started
[Instructions for setting up and running the project]

## Features
[List of features]

## Contributing
[Guidelines for contributing to the project]

## License
[License information]
"@
    Set-Content -Path "README.md" -Value $readmeContent
    Write-Host "Created README.md" -ForegroundColor Green

    # Step 8: Create a basic project structure (example for a web project)
    Write-Host "Creating basic project structure..." -ForegroundColor Yellow
    New-Item -Path "src" -ItemType Directory | Out-Null
    New-Item -Path "docs" -ItemType Directory | Out-Null
    New-Item -Path "tests" -ItemType Directory | Out-Null
    Write-Host "Created basic project structure" -ForegroundColor Green
    
    # Setup ADF Documentation Workflow
    Write-Host "Setting up ADF Documentation Workflow..." -ForegroundColor Yellow
    
    # Create ADF directories
    $adfDocsDir = "docs/adf"
    $toolsDir = "tools/adf"
    
    New-Item -ItemType Directory -Path $adfDocsDir -Force | Out-Null
    Write-Host "Created $adfDocsDir" -ForegroundColor Green
    
    New-Item -ItemType Directory -Path $toolsDir -Force | Out-Null
    Write-Host "Created $toolsDir" -ForegroundColor Green
    
    # Copy ADF tools to project
    Write-Host "Copying ADF tools to project..." -ForegroundColor Cyan
    
    # Get the path to the repository root (where the script is located)
    $repoRoot = Split-Path -Parent (Split-Path -Parent $PSCommandPath)
    
    $toolFiles = @(
        "adf-viewer.html",
        "markdown-to-adf.html",
        "markdown-to-adf.js",
        "adf-documentation.json",
        "example-adf.json"
    )
    
    foreach ($file in $toolFiles) {
        $sourcePath = Join-Path -Path $repoRoot -ChildPath $file
        if (Test-Path $sourcePath) {
            Copy-Item -Path $sourcePath -Destination "$toolsDir/" -Force
            Write-Host "Copied $file to $toolsDir/" -ForegroundColor Green
        } else {
            Write-Host "Warning: $file not found in repository root" -ForegroundColor Yellow
        }
    }
    
    # Create a README for the ADF docs
    $readmePath = "$adfDocsDir/README.md"
    $readmeContent = @"
# ADF Documentation

This directory contains documentation in Atlassian Document Format (ADF).

## Viewing Documentation

To view these documents:

1. Open `../tools/adf/adf-viewer.html` in a web browser
2. Click "Load from File" and select an ADF JSON file from this directory

## Updating Documentation

When updating documentation:

1. Edit the original Markdown files in the parent directory
2. Run the conversion script to regenerate the ADF files:
   ```powershell
   .\convert-docs.ps1
   ```
3. Commit both the Markdown and ADF versions to version control
"@
    
    Set-Content -Path $readmePath -Value $readmeContent
    Write-Host "Created $readmePath" -ForegroundColor Green
    
    # Create a conversion script
    $conversionScriptPath = "convert-docs.ps1"
    $conversionScriptContent = @"
# Convert Markdown docs to ADF
# This script converts all Markdown files in the docs directory to ADF format

# Configuration
`$docsDir = "./docs"
`$adfDocsDir = "./docs/adf"
`$toolsDir = "./tools/adf"

# Convert Markdown files to ADF
Write-Host "Converting Markdown files to ADF..." -ForegroundColor Cyan

`$markdownFiles = Get-ChildItem -Path `$docsDir -Filter "*.md" -Recurse | Where-Object { `$_.FullName -notlike "*`$adfDocsDir*" }
foreach (`$file in `$markdownFiles) {
    `$relativePath = `$file.FullName.Substring((Resolve-Path `$docsDir).Path.Length + 1)
    `$outputPath = Join-Path -Path `$adfDocsDir -ChildPath (`$relativePath -replace "\.md`$", ".adf.json")
    
    # Create directory if it doesn't exist
    `$outputDir = Split-Path -Path `$outputPath -Parent
    if (-not (Test-Path `$outputDir)) {
        New-Item -ItemType Directory -Path `$outputDir -Force | Out-Null
    }
    
    # Convert Markdown to ADF
    Write-Host "Converting `$(`$file.FullName) to `$outputPath" -ForegroundColor Green
    node "`$toolsDir/markdown-to-adf.js" `$file.FullName `$outputPath
}

Write-Host "Conversion complete!" -ForegroundColor Cyan
"@
    
    Set-Content -Path $conversionScriptPath -Value $conversionScriptContent
    Write-Host "Created $conversionScriptPath" -ForegroundColor Green
    
    # Create a sample documentation file if docs directory is empty
    $sampleDocPath = "docs/getting-started.md"
    if ((Get-ChildItem -Path "docs" -Filter "*.md").Count -eq 0) {
        $sampleDocContent = @"
# Getting Started

This is a sample documentation file that can be converted to ADF format.

## Introduction

This project uses a documentation-as-code approach with support for Atlassian Document Format (ADF).

## Features

- **Markdown Support**: Write documentation in Markdown format
- **ADF Conversion**: Convert Markdown to ADF for use with Atlassian products
- **Version Control**: Store documentation alongside code in the repository
- **Automated Conversion**: Use scripts to automate the conversion process

## How to Use

1. Write documentation in Markdown format in the `docs` directory
2. Run the conversion script to generate ADF files:
   ```powershell
   .\convert-docs.ps1
   ```
3. View the ADF files using the ADF Viewer:
   ```
   .\tools\adf\adf-viewer.html
   ```
4. Commit both Markdown and ADF files to version control
"@
        
        Set-Content -Path $sampleDocPath -Value $sampleDocContent
        Write-Host "Created sample documentation file: $sampleDocPath" -ForegroundColor Green
    }
    
    # Update .gitignore to include ADF documentation directories
    $gitignoreContent = Get-Content ".gitignore"
    $modified = $false
    
    if (-not ($gitignoreContent -contains "!$toolsDir/")) {
        Add-Content -Path ".gitignore" -Value "!$toolsDir/"
        $modified = $true
    }
    
    if (-not ($gitignoreContent -contains "!$adfDocsDir/")) {
        Add-Content -Path ".gitignore" -Value "!$adfDocsDir/"
        $modified = $true
    }
    
    if ($modified) {
        Write-Host "Updated .gitignore to include ADF documentation directories" -ForegroundColor Green
    }

    Write-Host "`nProject '$ProjectName' has been successfully set up with RooFlow custom modes, memory system, and ADF integration!" -ForegroundColor Green
    
    Write-Host "`nNext steps:" -ForegroundColor Cyan
    Write-Host "1. Configure MCP servers (optional): .\scripts\Configure-McpServers.ps1" -ForegroundColor Cyan
    Write-Host "2. Start a new Roo Code task in Architect mode" -ForegroundColor Cyan
    Write-Host "3. Begin with a project planning session" -ForegroundColor Cyan
    Write-Host "4. Use 'Update Memory Bank' or 'UMB' command at key milestones" -ForegroundColor Cyan
    Write-Host "5. For ADF documentation conversion, ensure Node.js is installed and run: .\convert-docs.ps1" -ForegroundColor Cyan

} catch {
    Write-Error "An error occurred: $_"
}