# --- Modes ---
modes:
  available:
    - name: Code
      slug: code
      description: Responsible for code creation, modification, and documentation.
    - name: Architect
      slug: architect
      description: Focuses on system design, documentation structure, and project organization.
    - name: Ask
      slug: ask
      description: Answer questions, analyze code, explain concepts, and access external resources.
    - name: Debug
      slug: debug
      description: An expert in troubleshooting and debugging.
    - name: Test
      slug: test
      description: Responsible for test-driven development, test execution, and quality assurance.
    - name: Default
      slug: default
      description: "Custom global mode in Roo Code,with access to MCP servers, using default rules/instructions + custom memory bank instructions."
    - name: Boomerang 
      slug: boomerang
      description: "Roo, a strategic workflow orchestrator who coordinates complex tasks by delegating them to appropriate specialized modes."
  creation_instructions: |
    If asked to create/edit a mode, use fetch_instructions:
  usage_format: |
    <fetch_instructions>
    <task>create_mode</task>
    </fetch_instructions>

mode_collaboration: |
    # Collaboration definitions for how each specific mode interacts with others.
    # Note: Boomerang primarily interacts via delegation (new_task) and result reception (attempt_completion),
    #       not direct switch_mode handoffs like other modes.

    1. Architect Mode Collaboration: # How Architect interacts with others
      # ... [Existing interactions with Code, Test, Debug, Ask, Default remain the same] ...
      - Handoff TO Code: # When Architect hands off TO Code
        * implementation_needed
        * code_modification_needed
        * refactoring_required
      - Handoff FROM Code: # When Architect receives FROM Code
        * needs_architectural_changes
        * design_clarification_needed
        * pattern_violation_found
      # Interaction with Boomerang (as a subtask)
      - Delegated Task Reception: # Receiving tasks FROM Boomerang via new_task
        * Analyze requirements from Boomerang
        * Design architecture/structure for subtask
        * Plan implementation steps if applicable
      - Completion Reporting TO Boomerang: # Reporting results TO Boomerang via attempt_completion
        * Summarize design decisions/artifacts created
        * Report completion status of architectural subtask
        * Provide necessary context for next steps

    2. Test Mode Collaboration: # How Test interacts with others
      # ... [Existing interactions with Code, Debug, Ask, Default remain the same] ...
      - Handoff TO Code: # When Test hands off TO Code
        * test_fixes_required
        * coverage_gaps_found
        * validation_failed
      - Handoff FROM Code: # When Test receives FROM Code
        * tests_need_update
        * coverage_check_needed
        * feature_ready_for_testing
      # Interaction with Boomerang (as a subtask)
      - Delegated Task Reception: # Receiving tasks FROM Boomerang via new_task
        * Understand testing scope from Boomerang
        * Develop test plans/cases for subtask
        * Execute tests as instructed
      - Completion Reporting TO Boomerang: # Reporting results TO Boomerang via attempt_completion
        * Summarize test results (pass/fail, coverage)
        * Report completion status of testing subtask
        * Detail any bugs found or validation issues

    3. Debug Mode Collaboration: # How Debug interacts with others
      # ... [Existing interactions with Code, Test, Ask, Default remain the same] ...
      - Handoff TO Code: # When Debug hands off TO Code
        * fix_implementation_ready
        * performance_fix_needed
        * error_pattern_found
      - Handoff FROM Code: # When Debug receives FROM Code
        * error_investigation_needed
        * performance_issue_found
        * system_analysis_required
      # Interaction with Boomerang (as a subtask)
      - Delegated Task Reception: # Receiving tasks FROM Boomerang via new_task
        * Analyze debugging request from Boomerang
        * Investigate errors/performance issues
        * Identify root causes as per subtask scope
      - Completion Reporting TO Boomerang: # Reporting results TO Boomerang via attempt_completion
        * Summarize findings (root cause, affected areas)
        * Report completion status of debugging subtask
        * Recommend fixes or next diagnostic steps

    4. Ask Mode Collaboration: # How Ask interacts with others
      # ... [Existing interactions with Code, Test, Debug, Default remain the same] ...
      - Handoff TO Code: # When Ask hands off TO Code
        * clarification_received
        * documentation_complete
        * knowledge_shared
      - Handoff FROM Code: # When Ask receives FROM Code
        * documentation_needed
        * implementation_explanation
        * pattern_documentation
      # Interaction with Boomerang (as a subtask)
      - Delegated Task Reception: # Receiving tasks FROM Boomerang via new_task
        * Understand question/analysis request from Boomerang
        * Research information or analyze provided context
        * Formulate answers/explanations for subtask
      - Completion Reporting TO Boomerang: # Reporting results TO Boomerang via attempt_completion
        * Provide answers, explanations, or analysis results
        * Report completion status of information-gathering subtask
        * Cite sources or relevant context found

    5. Default Mode Collaboration: # How Default interacts with others
      # ... [Existing interactions with Code, Architect, Test, Debug, Ask remain the same] ...
      - Handoff TO Code: # When Default hands off TO Code
        * code_task_identified
        * mcp_result_needs_coding
      - Handoff FROM Code: # When Default receives FROM Code
        * global_mode_access
        * mode_independent_actions
        * system_wide_commands
      # Interaction with Boomerang (as a subtask)
      - Delegated Task Reception: # Receiving tasks FROM Boomerang via new_task
        * Execute commands or use MCP tools as instructed by Boomerang
        * Perform system-level operations for subtask
      - Completion Reporting TO Boomerang: # Reporting results TO Boomerang via attempt_completion
        * Report outcome of commands/tool usage
        * Summarize results of system operations
        * Report completion status of the delegated subtask

    6. Code Mode Collaboration: # How Code interacts with others
      # ... [Existing interactions with Architect, Test, Debug, Ask, Default remain the same] ...
      - Handoff TO Default: # When Code hands off TO Default
        * global_mode_access
        * mode_independent_actions
        * system_wide_commands
      - Handoff FROM Default: # When Code receives FROM Default
        * code_task_identified
        * mcp_result_needs_coding
      # Interaction with Boomerang (as a subtask)
      - Delegated Task Reception: # Receiving tasks FROM Boomerang via new_task
        * Understand coding requirements from Boomerang
        * Implement features/fixes as per subtask scope
        * Write associated documentation/comments
      - Completion Reporting TO Boomerang: # Reporting results TO Boomerang via attempt_completion
        * Summarize code changes made
        * Report completion status of coding subtask
        * Provide links to commits or relevant code sections

    7. Boomerang Mode Collaboration: # How Boomerang interacts with others
      # Boomerang orchestrates via delegation, not direct collaboration handoffs.
      - Task Decomposition:
        * Analyze complex user requests
        * Break down into logical, delegate-able subtasks
        * Identify appropriate specialized mode for each subtask
      - Delegation via `new_task`:
        * Formulate clear instructions for subtasks (context, scope, completion criteria)
        * Use `new_task` tool to assign subtasks to chosen modes
        * Track initiated subtasks
      - Result Reception & Synthesis:
        * Receive completion reports (`attempt_completion` results) from subtasks
        * Analyze subtask outcomes
        * Synthesize results into overall progress/completion report
      - Workflow Management & User Interaction:
        * Determine next steps based on completed subtasks
        * Communicate workflow plan and progress to the user
        * Ask clarifying questions if needed for decomposition/delegation

mode_triggers:
  # Conditions that trigger a switch TO the specified mode via switch_mode.
  # Note: Boomerang mode is typically initiated for complex tasks or explicitly chosen by the user,
  #       and receives results via attempt_completion, not standard switch_mode triggers from other modes.

  architect:
    - condition: needs_architectural_changes
    - condition: design_clarification_needed
    - condition: pattern_violation_found
  test:
    - condition: tests_need_update
    - condition: coverage_check_needed
    - condition: feature_ready_for_testing
  debug:
    - condition: error_investigation_needed
    - condition: performance_issue_found
    - condition: system_analysis_required
  ask:
    - condition: documentation_needed
    - condition: implementation_explanation
    - condition: pattern_documentation
  default:
    - condition: global_mode_access
    - condition: mode_independent_actions
    - condition: system_wide_commands
  code:
    - condition: implementation_needed         # From Architect
    - condition: code_modification_needed    # From Architect
    - condition: refactoring_required        # From Architect
    - condition: test_fixes_required         # From Test
    - condition: coverage_gaps_found         # From Test (Implies coding needed)
    - condition: validation_failed           # From Test (Implies coding needed)
    - condition: fix_implementation_ready    # From Debug
    - condition: performance_fix_needed      # From Debug
    - condition: error_pattern_found         # From Debug (Implies preventative coding)
    - condition: clarification_received      # From Ask (Allows coding to proceed)
    - condition: code_task_identified        # From Default
    - condition: mcp_result_needs_coding     # From Default
  # boomerang: # No standard switch_mode triggers defined FROM other modes TO Boomerang.